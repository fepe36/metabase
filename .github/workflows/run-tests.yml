name: Run Tests

on:
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  files-changed:
    name: Check which files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      e2e_all: ${{ steps.changes.outputs.e2e_all }}
      backend_all: ${{ steps.changes.outputs.backend_all }}
      frontend_all: ${{ steps.changes.outputs.frontend_all }}
      frontend_sources: ${{ steps.changes.outputs.frontend_sources }}
      embedding_sdk: ${{ steps.changes.outputs.frontend_embedding_sdk_sources }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-paths.yaml

  static-viz-files-changed:
    name: Check whether static-viz files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      static_viz: ${{ steps.static_viz.outputs.static_viz }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: "files-changed"
      - name: Build static-viz frontend
        run: yarn build-static-viz
        env:
          MB_EDITION: ee
      - name: Upload Static Viz Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-viz-bundle-${{ github.event.pull_request.head.sha || github.sha }}
          path: resources/frontend_client/app/dist

      - name: Check for static viz changes
        uses: dorny/paths-filter@v3.0.0
        id: static_viz
        with:
          token: ${{ github.token }}
          filters: .github/static-viz-sources.yaml

  # if this is a test on a release branch, we need to check the build requirements
  get-build-requirements:
    if: |
      !cancelled() &&
      contains(github.ref, 'release-x')
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      java_version: ${{ fromJson(steps.dependencies.outputs.result).java_version }}
      node_version: ${{ fromJson(steps.dependencies.outputs.result).node_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get build dependencies
        uses: actions/github-script@v7
        id: dependencies
        with:
          script: | # js
            const { getBuildRequirements, getVersionFromReleaseBranch } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = getVersionFromReleaseBranch('${{ github.ref }}');
            const requirements = getBuildRequirements(version);

            return {
              java_version: requirements.java,
              node_version: requirements.node,
            };

  # Central uberjar build that all other jobs will use
  build-uberjar-ee:
    name: Build Uberjar EE
    needs: [files-changed, get-build-requirements]
    if: ${{ !cancelled() && (needs.files-changed.outputs.e2e_all == 'true' || needs.files-changed.outputs.backend_all == 'true' || needs.files-changed.outputs.embedding_sdk == 'true') }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    env:
      MB_EDITION: ee
      INTERACTIVE: false
      # make sure that builds on release branches get licenses, because we use them for releases
      SKIP_LICENSES: ${{ github.event_name == 'pull_request' }}
    outputs:
      artifact_name: metabase-ee-${{ github.event.pull_request.head.sha || github.sha }}-uberjar
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
        with:
          node-version: "${{ needs.get-build-requirements.outputs.node_version }}"
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: uberjar
          java-version: "${{ needs.get-build-requirements.outputs.java_version || 21 }}"

      - name: Build uberjar with ./bin/build.sh
        timeout-minutes: 10
        run: ./bin/build.sh
        shell: bash

      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact
        with:
          name: metabase-ee-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

  build-uberjar-oss:
    name: Build Uberjar OSS
    needs: [files-changed, get-build-requirements]
    if: ${{ !cancelled() && (needs.files-changed.outputs.e2e_all == 'true' || needs.files-changed.outputs.backend_all == 'true' || needs.files-changed.outputs.embedding_sdk == 'true') }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    env:
      MB_EDITION: oss
      INTERACTIVE: false
      # make sure that builds on release branches get licenses, because we use them for releases
      SKIP_LICENSES: ${{ github.event_name == 'pull_request' }}
    outputs:
      artifact_name: metabase-oss-${{ github.event.pull_request.head.sha || github.sha }}-uberjar
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
        with:
          node-version: "${{ needs.get-build-requirements.outputs.node_version }}"
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: uberjar
          java-version: "${{ needs.get-build-requirements.outputs.java_version || 21 }}"

      - name: Build uberjar with ./bin/build.sh
        timeout-minutes: 10
        run: ./bin/build.sh
        shell: bash

      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact
        with:
          name: metabase-oss-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

  # Check if the uberjar is healthy and create job outputs for each edition
  create-uberjar-outputs:
    name: Create Uberjar Output Names
    needs: [build-uberjar-ee, build-uberjar-oss]
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      artifact_name_ee: ${{ needs.build-uberjar-ee.outputs.artifact_name }}
      artifact_name_oss: ${{ needs.build-uberjar-oss.outputs.artifact_name }}
    steps:
      - name: Generate artifact names
        run: |
          echo "Generated artifact names for EE and OSS builds"
          echo "EE: ${{ needs.build-uberjar-ee.outputs.artifact_name }}"
          echo "OSS: ${{ needs.build-uberjar-oss.outputs.artifact_name }}"

  check-uberjar-health-ee:
    runs-on: ubuntu-22.04
    name: Check if EE uberjar is healthy
    needs: [build-uberjar-ee, create-uberjar-outputs]
    timeout-minutes: 10
    steps:
      - name: Prepare JRE (Java Run-time Environment)
        uses: actions/setup-java@v4
        with:
          java-package: jre
          java-version: 21
          distribution: "temurin"
      - run: java -version
      - uses: actions/download-artifact@v4
        name: Retrieve uberjar artifact
        with:
          name: ${{ needs.create-uberjar-outputs.outputs.artifact_name_ee }}
      - name: Launch uberjar
        run: >-
          java --add-opens java.base/java.nio=ALL-UNNAMED -jar ./target/uberjar/metabase.jar &
      - name: Wait for Metabase to start
        run: while ! curl 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  check-uberjar-health-oss:
    runs-on: ubuntu-22.04
    name: Check if OSS uberjar is healthy
    needs: [build-uberjar-oss, create-uberjar-outputs]
    timeout-minutes: 10
    steps:
      - name: Prepare JRE (Java Run-time Environment)
        uses: actions/setup-java@v4
        with:
          java-package: jre
          java-version: 21
          distribution: "temurin"
      - run: java -version
      - uses: actions/download-artifact@v4
        name: Retrieve uberjar artifact
        with:
          name: ${{ needs.create-uberjar-outputs.outputs.artifact_name_oss }}
      - name: Launch uberjar
        run: >-
          java --add-opens java.base/java.nio=ALL-UNNAMED -jar ./target/uberjar/metabase.jar &
      - name: Wait for Metabase to start
        run: while ! curl 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  # Central embedding SDK build that all jobs will use
  build-embedding-sdk:
    needs: [files-changed]
    if: ${{ !cancelled() && needs.files-changed.outputs.embedding_sdk == 'true' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      artifact_name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: "cljs"
      - name: Build Embedding SDK package
        run: yarn build-embedding-sdk
      - name: Prepare Embedding SDK artifact
        uses: actions/upload-artifact@v4
        with:
          name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
          path: resources/embedding-sdk

  # Run all the backend tests
  backend-tests:
    needs: [files-changed, static-viz-files-changed, build-uberjar-ee, build-uberjar-oss, check-uberjar-health-ee, check-uberjar-health-oss, create-uberjar-outputs]
    if: ${{ !cancelled() }}
    uses: ./.github/workflows/backend.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.backend_all != 'true' && needs.static-viz-files-changed.outputs.static_viz != 'true' }}
      artifact_name_ee: ${{ needs.create-uberjar-outputs.outputs.artifact_name_ee }}
      artifact_name_oss: ${{ needs.create-uberjar-outputs.outputs.artifact_name_oss }}

  # Run all the database driver tests
  driver-tests:
    needs: [files-changed, build-uberjar-ee, build-uberjar-oss, check-uberjar-health-ee, check-uberjar-health-oss, create-uberjar-outputs]
    if: ${{ !cancelled() }}
    uses: ./.github/workflows/drivers.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.backend_all != 'true' }}
      artifact_name_ee: ${{ needs.create-uberjar-outputs.outputs.artifact_name_ee }}
      artifact_name_oss: ${{ needs.create-uberjar-outputs.outputs.artifact_name_oss }}

  # Run all the frontend tests
  frontend-tests:
    needs: files-changed
    uses: ./.github/workflows/frontend.yml
    secrets: inherit
    with:
      skip: ${{ needs.files-changed.outputs.frontend_all != 'true' }}

  # Run embedding SDK tests
  embedding-sdk-tests:
    needs: [files-changed, build-uberjar-ee, build-uberjar-oss, build-embedding-sdk, check-uberjar-health-ee, check-uberjar-health-oss, create-uberjar-outputs]
    if: ${{ !cancelled() && needs.files-changed.outputs.embedding_sdk == 'true' }}
    uses: ./.github/workflows/e2e-component-tests-embedding-sdk.yml
    secrets: inherit
    with:
      cached-embedding-sdk-dist-artifact-name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
      artifact_name_ee: ${{ needs.create-uberjar-outputs.outputs.artifact_name_ee }}
      artifact_name_oss: ${{ needs.create-uberjar-outputs.outputs.artifact_name_oss }}

  # Run sample apps tests
  sample-apps-tests:
    needs: [files-changed, build-uberjar-ee, build-uberjar-oss, build-embedding-sdk, check-uberjar-health-ee, check-uberjar-health-oss, create-uberjar-outputs]
    if: ${{ !cancelled() && needs.files-changed.outputs.e2e_all == 'true' }}
    uses: ./.github/workflows/e2e-sample-apps-tests.yml
    secrets: inherit
    with:
      artifact_name_ee: ${{ needs.create-uberjar-outputs.outputs.artifact_name_ee }}
      artifact_name_oss: ${{ needs.create-uberjar-outputs.outputs.artifact_name_oss }}
      embedding_sdk_artifact_name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}

  # Run all the e2e tests
  e2e-tests:
    needs: [files-changed, build-uberjar-ee, build-uberjar-oss, check-uberjar-health-ee, check-uberjar-health-oss, create-uberjar-outputs]
    if: ${{ !cancelled() && needs.files-changed.outputs.e2e_all == 'true' }}
    uses: ./.github/workflows/e2e-tests.yml
    secrets: inherit
    with:
      skip: false
      artifact_name_ee: ${{ needs.create-uberjar-outputs.outputs.artifact_name_ee }}
      artifact_name_oss: ${{ needs.create-uberjar-outputs.outputs.artifact_name_oss }}
