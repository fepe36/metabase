name: Release 1 - Build Release Artifact
run-name: Build ${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Metabase version (e.g. v0.46.3)"
        type: string
        required: true
      commit:
        description: "A full-length commit SHA-1 hash"
        required: true

jobs:
  start-message:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Send build start message
        uses: actions/github-script@v7
        env:
          SLACK_RELEASE_CHANNEL: ${{ vars.SLACK_RELEASE_CHANNEL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          script: | # js
            const { sendPreReleaseMessage } = require('${{ github.workspace }}/release/dist/index.cjs');

            await sendPreReleaseMessage({
              github,
              owner: context.repo.owner,
              repo: context.repo.repo,
              version: '${{ inputs.version }}',
              runId: '${{ github.run_id }}',
              releaseSha: '${{ inputs.commit }}',
              userName: '${{ github.actor }}',
              channelName: '${{ vars.SLACK_RELEASE_CHANNEL }}',
            }).catch(console.error);

  trigger-milestone-check:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: start-message
    steps:
      - name: trigger pre-release milestone check
        uses: actions/github-script@v7
        with:
          script: | # js
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release-milestone-check.yml',
              ref: '${{ github.ref }}',
              inputs: {
                commit: '${{ inputs.commit }}',
                version: '${{ inputs.version }}',
              }
            });

  check-version:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      ee: ${{ fromJson(steps.canonical_version.outputs.result).ee }}
      oss: ${{ fromJson(steps.canonical_version.outputs.result).oss }}
    steps:
      - name: Fail early on the incorrect version format
        if: ${{ !(startsWith(inputs.version,'v0.') || startsWith(inputs.version,'v1.')) }}
        run: |
          echo "The version format is invalid!"
          echo "It must start with either 'v0.' or 'v1.'."
          echo "Please, try again."
          exit 1
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get Release Version
        uses: actions/github-script@v7
        id: canonical_version
        with:
          script: | # js
            const { isValidVersionString, getCanonicalVersion, hasBeenReleased } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = '${{ inputs.version }}';

            if (!isValidVersionString(version)) {
              throw new Error("The version format is invalid! It must start with either 'v0.' or 'v1.'.");
            }

            const versions = {
              ee: getCanonicalVersion(version, 'ee'),
              oss: getCanonicalVersion(version, 'oss'),
            };

            const released = await hasBeenReleased({
              github,
              owner: context.repo.owner,
              repo: context.repo.repo,
              version: versions.oss,
            });

            if (released) {
              throw new Error("This version has already been released!", version);
            }

            return versions;

  check-commit:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - name: Check out the code to verify the release branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # IMPORTANT! to get all the branches
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get Release Branch
        uses: actions/github-script@v7
        id: release_branch
        with:
          result-encoding: string
          script: | # js
            const { getReleaseBranch } = require('${{ github.workspace }}/release/dist/index.cjs');
            const version = '${{ inputs.version }}';
            const releaseBranch = getReleaseBranch(version);
            return releaseBranch;
      - name: Ensure that the specified commit exists in the ${{ steps.release_branch.outputs.result }} release branch
        run: |
          RELEASE_BRANCH=${{ steps.release_branch.outputs.result }}
          git checkout $RELEASE_BRANCH
          git branch --contains ${{ inputs.commit }} | grep -q $RELEASE_BRANCH \
            && echo "Commit found in correct release branch" \
            || (echo "Commit not found in correct release branch" && exit 1)

  get-build-requirements:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      java_version: ${{ fromJson(steps.dependencies.outputs.result).java_version }}
      node_version: ${{ fromJson(steps.dependencies.outputs.result).node_version }}
      build_process: ${{ fromJson(steps.dependencies.outputs.result).build_process }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get build dependencies
        uses: actions/github-script@v7
        id: dependencies
        with:
          script: | # js
            const { getBuildRequirements, getMajorVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = '${{ inputs.version }}';

            const requirements = getBuildRequirements(version);
            const build_process = getMajorVersion(version) < 46 ? 'legacy' : 'new';
            console.log('Build process:', build_process);

            return {
              java_version: requirements.java,
              node_version: requirements.node,
              build_process,
            };

  download-uberjar-for-release:
    name: Download Uberjar (${{ matrix.edition }}) for Release
    needs: [check-version, check-commit, get-build-requirements] # Depends on checks
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss, ee]
    steps:
      # Need checkout for the action path
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github/actions/fetch-artifact # Only need the action

      - name: Fetch release artifact for ${{ matrix.edition }}
        id: fetch_artifact
        uses: ./.github/actions/fetch-artifact # Use fetch-artifact which takes a commit
        with:
          # Construct artifact name based on the *input commit*
          name: metabase-release-${{ matrix.edition }}-${{ inputs.commit }}-uberjar

      - name: Check JAR health (basic file check)
        run: |
          if [ ! -f ./metabase.jar ]; then
             echo "ERROR: Metabase JAR not found after download."
             # Attempt to list available artifacts for debugging
             echo "Listing artifacts for commit ${{ inputs.commit }}..."
             gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.name | contains("${{ inputs.commit }}"))' || echo "Failed to list artifacts."
             exit 1
          fi
          file --mime-type ./metabase.jar | grep -q 'application/zip\|application/java-archive' || (echo "Downloaded file is not a JAR" && exit 1)
          # Verify other expected files were downloaded by fetch-artifact
          [ -f ./COMMIT-ID ] || (echo "COMMIT-ID missing" && exit 1)
          [ -f ./SHA256.sum ] || (echo "SHA256.sum missing" && exit 1)
          # Extract and check version.properties (optional but good)
          jar xf metabase.jar version.properties
          [ -f ./version.properties ] || (echo "version.properties missing in JAR" && exit 1)
          echo "JAR and associated files downloaded successfully for ${{ matrix.edition }}."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh cli needs token

      - name: Upload JARs as test artifact (for pre-release tests)
        uses: actions/upload-artifact@v4
        with:
          # Use the name expected by pre-release.yml
          name: metabase-test-${{ matrix.edition }}-uberjar
          path: |
            ./metabase.jar
            ./COMMIT-ID
            ./SHA256.sum
            ./version.properties # Include extracted version properties if needed by pre-release tests

  run-pre-release-tests:
    name: Run pre-release tests for ${{ inputs.version }}
    needs: download-uberjar-for-release
    uses: ./.github/workflows/pre-release.yml
    secrets: inherit
    with:
      commit: ${{ inputs.commit }}
      version: ${{ inputs.version }}
